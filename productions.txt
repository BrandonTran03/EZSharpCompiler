<program> ::= <fdecls> <declarations> <statement_seq> .
<fdecls> ::= <fdec> ; <fdecls>
<fdecls> ::= epsilon
<fdec> ::= def <type> <fname> ( <params> ) <declarations> <statement_seq> fed
<params> ::= <type> <var> <params*>
<params> ::= epsilon
<params*> ::= , <params>
<params*> ::= epsilon
<fname> ::= <id>
<declarations> ::= <decl> ; <declarations>
<declarations> ::= epsilon
<decl> ::= <type> <varlist>
<type> ::= int
<type> ::= double
<varlist> ::= <var> <varlist*>
<varlist*> ::= , <varlist>
<varlist*> ::= epsilon
<statement_seq> ::= <statement> <statement_seq*>
<statement_seq*> ::= ; <statement_seq>
<statement_seq*> ::= epsilon
<statement> ::= <var> = <expr>
<statement> ::= if <bexpr> then <statement_seq> <statement*>
<statement> ::= while <bexpr> do <statement_seq> od
<statement> ::= print <expr>
<statement> ::= return <expr>
<statement> ::= epsilon
<statement*> ::= else <statement_seq> fi 
<statement*> ::= fi
<expr> ::= <term> <expr**>
<expr*> ::= + <term> 
<expr*> ::= - <term>
<expr**> ::= <expr*> <expr**>
<expr**> ::= epsilon
<term> ::= <factor> <term**>
<term*> ::= * <factor> 
<term*> ::= / <factor>
<term*> ::= % <factor>
<term**> ::= <term*> <term**>
<term**> ::= epsilon
<factor> ::= <id> <factor*>
<factor> ::= <number> 
<factor> ::= ( <expr> )
<factor*> ::= <var*>
<factor*> ::= ( <exprseq> )
<exprseq> ::= <expr> <exprseq*>
<exprseq> ::= epsilon
<exprseq*> ::= , <exprseq>
<exprseq*> ::= epsilon
<bexpr> ::= <bterm> <bexpr*>
<bexpr*> ::= or <bterm> <bexpr*>
<bexpr*> ::= epsilon
<bterm> ::= <bfactor> <bterm*>
<bterm*> ::= and <bfactor>
<bterm*> ::= epsilon
<bfactor> ::= ( <bfactor*>
<bfactor> ::= not <bfactor>
<bfactor*> ::= <bexpr> )
<bfactor*> ::= <expr> <comp> <expr> )
<comp> ::= <
<comp> ::= > 
<comp> ::= == 
<comp> ::= <= 
<comp> ::= >=
<comp> ::= <>
<var> ::= <id> <var*>
<var*> ::= [ <expr> ]
<var*> ::= epsilon
<id> ::= id
<number> ::= integer
<number> ::= dbl
